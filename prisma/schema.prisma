// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  name       String
  first_name String
  password   String
  roles      String[]

  courses       Course[]       @relation("UserCourses")
  posts         Post[]
  notifications Notification[]
  inscriptions  Inscription[]
  submissions   Submission[]
  Assignment    Assignment[]
  Log           Log[]
}

model Course {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  code                String   @unique
  name                String
  description         String
  creation_date       DateTime @default(now())
  picture             Bytes?
  user_responsible    User     @relation("UserCourses", fields: [user_responsible_id], references: [id])
  user_responsible_id String   @db.ObjectId

  notifications Notification[]
  posts         Post[]
  inscriptions  Inscription[]
  Assignment    Assignment[]
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date_time   DateTime
  title       String
  description String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.ObjectId

  course    Course @relation(fields: [course_id], references: [id])
  course_id String @db.ObjectId
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date_time   DateTime
  pinned      Boolean
  importance  String

  author    User   @relation(fields: [author_id], references: [id])
  author_id String @db.ObjectId

  course    Course @relation(fields: [course_id], references: [id])
  course_id String @db.ObjectId

  file    File?   @relation(fields: [file_id], references: [id])
  file_id String? @unique @db.ObjectId
}

model File {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  extension String
  file      Bytes

  post       Post?
  Submission Submission?
}

model Inscription {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user      User   @relation(fields: [user_id], references: [id])
  user_id   String @db.ObjectId
  course    Course @relation(fields: [course_id], references: [id])
  course_id String @db.ObjectId

  @@unique([user_id, course_id])
}

model Assignment {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  due_date        DateTime
  max_score       Int
  course_id       String       @db.ObjectId
  course          Course       @relation(fields: [course_id], references: [id])
  created_by      String       @db.ObjectId
  created_by_user User         @relation(fields: [created_by], references: [id])
  created_date    DateTime     @default(now())
  submissions     Submission[]
}

model Submission {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  assignment_id  String     @db.ObjectId
  assignment     Assignment @relation(fields: [assignment_id], references: [id])
  student_id     String     @db.ObjectId
  student        User       @relation(fields: [student_id], references: [id])
  file_id        String     @unique @db.ObjectId
  file           File       @relation(fields: [file_id], references: [id])
  submitted_date DateTime   @default(now())
  status         String     @default("submitted")
  score          Int?
  feedback       String?
}

model Log {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp   DateTime
  description String
  user_id     String   @db.ObjectId
  user        User     @relation(fields: [user_id], references: [id])
}
